// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package eventSourcing

import (
	"sync"
)

var (
	lockEventMockName    sync.RWMutex
	lockEventMockPayload sync.RWMutex
)

// EventMock is a mock implementation of Event.
//
//     func TestSomethingThatUsesEvent(t *testing.T) {
//
//         // make and configure a mocked Event
//         mockedEvent := &EventMock{
//             NameFunc: func() string {
// 	               panic("TODO: mock out the Name method")
//             },
//             PayloadFunc: func() []byte {
// 	               panic("TODO: mock out the Payload method")
//             },
//         }
//
//         // TODO: use mockedEvent in code that requires Event
//         //       and then make assertions.
//
//     }
type EventMock struct {
	// NameFunc mocks the Name method.
	NameFunc func() string

	// PayloadFunc mocks the Payload method.
	PayloadFunc func() []byte

	// calls tracks calls to the methods.
	calls struct {
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Payload holds details about calls to the Payload method.
		Payload []struct {
		}
	}
}

// Name calls NameFunc.
func (mock *EventMock) Name() string {
	if mock.NameFunc == nil {
		panic("moq: EventMock.NameFunc is nil but Event.Name was just called")
	}
	callInfo := struct {
	}{}
	lockEventMockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	lockEventMockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedEvent.NameCalls())
func (mock *EventMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	lockEventMockName.RLock()
	calls = mock.calls.Name
	lockEventMockName.RUnlock()
	return calls
}

// Payload calls PayloadFunc.
func (mock *EventMock) Payload() []byte {
	if mock.PayloadFunc == nil {
		panic("moq: EventMock.PayloadFunc is nil but Event.Payload was just called")
	}
	callInfo := struct {
	}{}
	lockEventMockPayload.Lock()
	mock.calls.Payload = append(mock.calls.Payload, callInfo)
	lockEventMockPayload.Unlock()
	return mock.PayloadFunc()
}

// PayloadCalls gets all the calls that were made to Payload.
// Check the length with:
//     len(mockedEvent.PayloadCalls())
func (mock *EventMock) PayloadCalls() []struct {
} {
	var calls []struct {
	}
	lockEventMockPayload.RLock()
	calls = mock.calls.Payload
	lockEventMockPayload.RUnlock()
	return calls
}
